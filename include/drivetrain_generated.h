// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DRIVETRAIN_ROBOT_DRIVETRAIN_H_
#define FLATBUFFERS_GENERATED_DRIVETRAIN_ROBOT_DRIVETRAIN_H_

#include "flatbuffers/flatbuffers.h"

namespace Robot {
namespace Drivetrain {

struct Pose2D;

struct DrivetrainStatus;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Pose2D FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double heading_;

 public:
  Pose2D() {
    memset(static_cast<void *>(this), 0, sizeof(Pose2D));
  }
  Pose2D(double _x, double _y, double _heading)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        heading_(flatbuffers::EndianScalar(_heading)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double heading() const {
    return flatbuffers::EndianScalar(heading_);
  }
};
FLATBUFFERS_STRUCT_END(Pose2D, 24);

struct DrivetrainStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_VELOCITY = 6
  };
  const Robot::Drivetrain::Pose2D *pos() const {
    return GetStruct<const Robot::Drivetrain::Pose2D *>(VT_POS);
  }
  const Robot::Drivetrain::Pose2D *velocity() const {
    return GetStruct<const Robot::Drivetrain::Pose2D *>(VT_VELOCITY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Robot::Drivetrain::Pose2D>(verifier, VT_POS) &&
           VerifyField<Robot::Drivetrain::Pose2D>(verifier, VT_VELOCITY) &&
           verifier.EndTable();
  }
};

struct DrivetrainStatusBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const Robot::Drivetrain::Pose2D *pos) {
    fbb_.AddStruct(DrivetrainStatus::VT_POS, pos);
  }
  void add_velocity(const Robot::Drivetrain::Pose2D *velocity) {
    fbb_.AddStruct(DrivetrainStatus::VT_VELOCITY, velocity);
  }
  explicit DrivetrainStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DrivetrainStatusBuilder &operator=(const DrivetrainStatusBuilder &);
  flatbuffers::Offset<DrivetrainStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DrivetrainStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<DrivetrainStatus> CreateDrivetrainStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Robot::Drivetrain::Pose2D *pos = 0,
    const Robot::Drivetrain::Pose2D *velocity = 0) {
  DrivetrainStatusBuilder builder_(_fbb);
  builder_.add_velocity(velocity);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline const Robot::Drivetrain::DrivetrainStatus *GetDrivetrainStatus(const void *buf) {
  return flatbuffers::GetRoot<Robot::Drivetrain::DrivetrainStatus>(buf);
}

inline const Robot::Drivetrain::DrivetrainStatus *GetSizePrefixedDrivetrainStatus(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Robot::Drivetrain::DrivetrainStatus>(buf);
}

inline bool VerifyDrivetrainStatusBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Robot::Drivetrain::DrivetrainStatus>(nullptr);
}

inline bool VerifySizePrefixedDrivetrainStatusBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Robot::Drivetrain::DrivetrainStatus>(nullptr);
}

inline void FinishDrivetrainStatusBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Robot::Drivetrain::DrivetrainStatus> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDrivetrainStatusBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Robot::Drivetrain::DrivetrainStatus> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Drivetrain
}  // namespace Robot

#endif  // FLATBUFFERS_GENERATED_DRIVETRAIN_ROBOT_DRIVETRAIN_H_
